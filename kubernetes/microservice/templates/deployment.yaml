apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "microservice.fullname" . }}
  labels:
    {{- include "microservice.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "microservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "microservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- if and (ne .Values.serviceType "api-gateway") (ne .Values.serviceType "notification-service") }}
      initContainers:
        - name: init-db
          image: mysql:8
          command: [ "/bin/sh", "/init-scripts/init-migrate.sh" ]
          volumeMounts:
            - name: init-script-volume
              mountPath: /init-scripts
            - name: migration-sql-volume
              mountPath: /migrations
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
      {{- end }}
      containers:
        - name: {{ required "Missing required value: serviceType" .Values.serviceType }}
          image: {{ index .Values.images .Values.serviceType | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "microservice.fullname" . }}-config
          {{- if or (eq .Values.serviceType "api-gateway") (eq .Values.serviceType "notification-service") }}
          env:
            - name: GROUP_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if eq .Values.serviceType "api-gateway" }}
            - name: USER_SERVICE_URL
              value: {{ index .Values.urls "user-service" }}
            - name: FRIENDSHIP_SERVICE_URL
              value: {{ index .Values.urls "friendship-service" }}
            - name: CONTENT_SERVICE_URL
              value: {{ index .Values.urls "content-service" }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .httpGet.path }}
              port: {{ .httpGet.port }}
              scheme: {{- if or (eq $.Values.serviceType "api-gateway") (eq $.Values.serviceType "notification-service") }} HTTPS {{- else }} {{ .httpGet.scheme | default "HTTP" }} {{- end }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .httpGet.path }}
              port: {{ .httpGet.port }}
              scheme: {{- if or (eq $.Values.serviceType "api-gateway") (eq $.Values.serviceType "notification-service") }} HTTPS {{- else }} {{ .httpGet.scheme | default "HTTP" }} {{- end }}
          {{- end }}
      volumes:
        - name: init-script-volume
          configMap:
            name: {{ include "microservice.fullname" . }}-init-script
            defaultMode: 0755
        - name: migration-sql-volume
          configMap:
            name: {{ include "microservice.fullname" . }}-db-migrations

